diff --git a/specs/Modal.spec.js b/specs/Modal.spec.js
index 65e80c2..a127e56 100644
--- a/specs/Modal.spec.js
+++ b/specs/Modal.spec.js
@@ -1,56 +1,80 @@
 /* eslint-env mocha */
-import TestUtils from 'react-addons-test-utils';
-import React from 'react';
-import ReactDOM from 'react-dom';
-import Modal from '../lib/components/Modal';
-import * as ariaAppHider from '../lib/helpers/ariaAppHider';
-import { renderModal, unmountModal, emptyDOM } from './helper';
-
-const Simulate = TestUtils.Simulate;
-import sinon from 'sinon';
-import expect from 'expect';
-
-describe('Modal', () => {
+var sinon = require('sinon');
+var expect = require('expect');
+var React = require('react');
+var ReactDOM = require('react-dom');
+var TestUtils = require('react-addons-test-utils');
+var Modal = require('../lib/components/Modal');
+var ariaAppHider = require('../lib/helpers/ariaAppHider');
+var helpers = require('./helper');
+
+var renderModal = helpers.renderModal;
+var unmountModal = helpers.unmountModal;
+var emptyDOM = helpers.emptyDOM;
+var findDOMNode = ReactDOM.findDOMNode;
+
+function dispatchMockEvent(ctor) {
+  return function(key, code) {
+    return function(element, opts) {
+      return ctor(element, Object.assign({}, { key: key, keyCode: code, which: code }, opts));
+    };
+  };
+}
+
+var dispatchMockKeyDownEvent = dispatchMockEvent(Simulate.keyDown);
+var dispatchMockEscKey = dispatchMockKeyDownEvent("ESC", 27);
+var dispatchMockTabKey = dispatchMockKeyDownEvent("TAB", 9);
+
+function isReactModalClassInBody() {
+  return document.body.className.indexOf('ReactModal__Body--open') > -1;
+}
+
+var Simulate = TestUtils.Simulate;
+var findDOMWithClass = TestUtils.scryRenderedDOMComponentsWithClass;
+
+describe('Modal', function () {
   afterEach('check if test cleaned up rendered modals', emptyDOM);
 
   it('scopes tab navigation to the modal');
   it('focuses the last focused element when tabbing in from browser chrome');
 
-  it('can be open initially', () => {
-    const component = renderModal({ isOpen: true }, 'hello');
-    expect(component.portal.refs.content.innerHTML.trim()).toEqual('hello');
+  it('can be open initially', function () {
+    var content = React.createElement('div', { className: 'content' }, null);
+    var modal = renderModal({ isOpen: true }, content);
+    var foundContent = findDOMWithClass(modal.portal, 'content');
+    expect(foundContent.length > 0).toBeTruthy();
   });
 
   it('can be closed initially', function() {
-    var component = renderModal({}, 'hello');
-    expect(ReactDOM.findDOMNode(component.portal).innerHTML.trim()).toEqual('');
+    var content = React.createElement('div', { className: 'content' }, null);
+    var modal = renderModal({}, content);
+    var foundContent = findDOMWithClass(modal.portal, 'content');
+    expect(foundContent.length == 0).toBeTruthy();
   });
 
   it('accepts appElement as a prop', function() {
     var el = document.createElement('div');
     var node = document.createElement('div');
-    ReactDOM.render((
-      <Modal isOpen={true} appElement={el} />
-    ), node);
+    ReactDOM.render(React.createElement(Modal, {
+      isOpen: true,
+      appElement: el
+    }), node);
     expect(el.getAttribute('aria-hidden')).toEqual('true');
     ReactDOM.unmountComponentAtNode(node);
   });
 
   it('renders into the body, not in context', function() {
     var node = document.createElement('div');
+
     var App = React.createClass({
-      render() {
-	return (
-	  <div>
-	    <Modal isOpen={true}>
-	      hello
-	    </Modal>
-	  </div>
-	);
+      render: function() {
+        return React.createElement('div', { className: 'content' }, React.createElement(Modal, {
+          isOpen: true
+        }));
       }
     });
     Modal.setAppElement(node);
-    ReactDOM.render(<App />, node);
+    ReactDOM.render(React.createElement(App, {}, null), node);
     var modalParent = document.body.querySelector('.ReactModalPortal').parentNode;
     expect(modalParent).toEqual(document.body);
     ReactDOM.unmountComponentAtNode(node);
@@ -60,20 +84,20 @@ describe('Modal', () => {
 
   it('renders the modal content with a dialog aria role when provided ', function () {
     var child = 'I am a child of Modal, and he has sent me here...';
-    var component = renderModal({isOpen: true, role: 'dialog'}, child);
+    var component = renderModal({ isOpen: true, role: 'dialog' }, child);
     expect(component.portal.refs.content.getAttribute('role')).toEqual('dialog');
   });
 
   it('renders the modal with a aria-label based on the contentLabel prop', function () {
     var child = 'I am a child of Modal, and he has sent me here...';
-    var component = renderModal({isOpen: true, contentLabel: 'Special Modal'}, child);
+    var component = renderModal({ isOpen: true, contentLabel: 'Special Modal' }, child);
     expect(component.portal.refs.content.getAttribute('aria-label')).toEqual('Special Modal');
   });
 
   it('has default props', function() {
     var node = document.createElement('div');
     Modal.setAppElement(document.createElement('div'));
-    var component = ReactDOM.render(<Modal />, node);
+    var component = ReactDOM.render(React.createElement(Modal, {}, null), node);
     var props = component.props;
     expect(props.isOpen).toBe(false);
     expect(props.ariaHideApp).toBe(true);
@@ -85,169 +109,156 @@ describe('Modal', () => {
   });
 
   it('removes the portal node', function() {
-    var component = renderModal({isOpen: true}, 'hello');
+    var component = renderModal({ isOpen: true }, 'hello');
     expect(component.portal.refs.content.innerHTML.trim()).toEqual('hello');
     unmountModal();
     expect(!document.querySelector('.ReactModalPortal')).toExist();
   });
 
   it('focuses the modal content', function(done) {
-    renderModal({isOpen: true}, null, function () {
+    renderModal({ isOpen: true }, null, function () {
       expect(document.activeElement).toEqual(this.portal.refs.content);
       done();
     });
   });
 
-  it('give back focus to previous element or modal.', (done) => {
+  it('give back focus to previous element or modal.', function(done) {
     function cleanup () {
       unmountModal();
       done();
     }
-    const modal = renderModal({
+    var modal = renderModal({
       isOpen: true,
-      onRequestClose () {
-	cleanup();
+      onRequestClose: function() {
+        cleanup();
       }
     }, null);
 
     renderModal({
       isOpen: true,
       onRequestClose: function () {
-	Simulate.keyDown(modal.portal.refs.content, {
-	  // The keyCode is all that matters, so this works
-	  key: 'esc',
-	  keyCode: 27,
-	  which: 27
-	});
-	expect(document.activeElement).toEqual(modal.portal.refs.content);
+        dispatchMockEscKey(modal.portal.refs.content);
+        expect(document.activeElement).toEqual(modal.portal.refs.content);
       }
     }, null, function checkPortalFocus () {
       expect(document.activeElement).toEqual(this.portal.refs.content);
-      Simulate.keyDown(this.portal.refs.content, {
-	// The keyCode is all that matters, so this works
-	key: 'esc',
-	keyCode: 27,
-	which: 27
-      });
+      dispatchMockEscKey(modal.portal.refs.content);
     });
   });
 
   it('does not focus the modal content when a descendent is already focused', function() {
-    var input = (
-      <input className="focus_input" ref={(el) => { el && el.focus(); }} />
+    var content;
+    var input = React.createElement(
+      <input className="focus_input" ref={(el) => { el && el.focus(); content = el; }} />
     );
 
-    renderModal({isOpen: true}, input, function () {
-      expect(document.activeElement).toEqual(document.querySelector('.focus_input'));
+    renderModal({ isOpen: true }, input, function () {
+      expect(document.activeElement).toEqual(content);
     });
   });
 
   it('handles case when child has no tabbable elements', function() {
-    var component = renderModal({isOpen: true}, 'hello');
-    Simulate.keyDown(component.portal.refs.content, {key: "Tab", keyCode: 9, which: 9});
+    var component = renderModal({ isOpen: true }, 'hello');
+    dispatchMockTabKey(component.portal.refs.content);
   });
 
   it('keeps focus inside the modal when child has no tabbable elements', function() {
     var tabPrevented = false;
-    var modal = renderModal({isOpen: true}, 'hello');
+    var modal = renderModal({ isOpen: true }, 'hello');
     expect(document.activeElement).toEqual(modal.portal.refs.content);
-    Simulate.keyDown(modal.portal.refs.content, {
-      key: "Tab",
-      keyCode: 9,
-      which: 9,
+    dispatchMockTabKey(modal.portal.refs.content, {
       preventDefault: function() { tabPrevented = true; }
     });
     expect(tabPrevented).toEqual(true);
   });
 
   it('supports portalClassName', function () {
-    var modal = renderModal({isOpen: true, portalClassName: 'myPortalClass'});
+    var modal = renderModal({ isOpen: true, portalClassName: 'myPortalClass' });
     expect(modal.node.className).toEqual('myPortalClass');
   });
 
   it('supports custom className', () => {
-    const modal = renderModal({ isOpen: true, className: 'myClass' });
+    var modal = renderModal({ isOpen: true, className: 'myClass' });
     expect(
       modal.portal.refs.content.className.indexOf('myClass')
     ).toNotEqual(-1);
   });
 
   it('supports overlayClassName', () => {
-    const modal = renderModal({ isOpen: true, overlayClassName: 'myOverlayClass' });
+    var modal = renderModal({ isOpen: true, overlayClassName: 'myOverlayClass' });
     expect(
       modal.portal.refs.overlay.className.indexOf('myOverlayClass')
     ).toNotEqual(-1);
   });
 
   it('overrides the default styles when a custom classname is used', () => {
-    const modal = renderModal({ isOpen: true, className: 'myClass' });
+    var modal = renderModal({ isOpen: true, className: 'myClass' });
     expect(modal.portal.refs.content.style.top).toEqual('');
   });
 
   it('overrides the default styles when a custom overlayClassName is used', () => {
-    const modal = renderModal({ isOpen: true, overlayClassName: 'myOverlayClass' });
+    var modal = renderModal({ isOpen: true, overlayClassName: 'myOverlayClass' });
     expect(modal.portal.refs.overlay.style.backgroundColor).toEqual('');
   });
 
   it('supports adding style to the modal contents', () => {
-    const modal = renderModal({ isOpen: true, style: { content: { width: '20px' } } });
+    var modal = renderModal({ isOpen: true, style: { content: { width: '20px' } } });
     expect(modal.portal.refs.content.style.width).toEqual('20px');
   });
 
   it('supports overriding style on the modal contents', () => {
-    const modal = renderModal({ isOpen: true, style: { content: { position: 'static' } } });
+    var modal = renderModal({ isOpen: true, style: { content: { position: 'static' } } });
     expect(modal.portal.refs.content.style.position).toEqual('static');
   });
 
   it('supports adding style on the modal overlay', () => {
-    const modal = renderModal({ isOpen: true, style: { overlay: { width: '75px' } } });
+    var modal = renderModal({ isOpen: true, style: { overlay: { width: '75px' } } });
     expect(modal.portal.refs.overlay.style.width).toEqual('75px');
   });
 
   it('supports overriding style on the modal overlay', () => {
-    const modal = renderModal({ isOpen: true, style: { overlay: { position: 'static' } } });
+    var modal = renderModal({ isOpen: true, style: { overlay: { position: 'static' } } });
     expect(modal.portal.refs.overlay.style.position).toEqual('static');
   });
 
   it('supports overriding the default styles', () => {
-    const previousStyle = Modal.defaultStyles.content.position;
+    var previousStyle = Modal.defaultStyles.content.position;
     // Just in case the default style is already relative, check that we can change it
-    const newStyle = previousStyle === 'relative' ? 'static' : 'relative';
+    var newStyle = previousStyle === 'relative' ? 'static' : 'relative';
     Modal.defaultStyles.content.position = newStyle;
-    const modal = renderModal({ isOpen: true });
+    var modal = renderModal({ isOpen: true });
     expect(modal.portal.refs.content.style.position).toEqual(newStyle);
     Modal.defaultStyles.content.position = previousStyle;
   });
 
   it('should remove class from body when no modals opened', () => {
-    const findReactModalOpenClass = () => document.body.className.indexOf('ReactModal__Body--open');
     renderModal({ isOpen: true });
     renderModal({ isOpen: true });
-    expect(findReactModalOpenClass() > -1).toBe(true);
+    expect(isReactModalClassInBody()).toBeTruthy();
     unmountModal();
-    expect(findReactModalOpenClass() > -1).toBe(true);
+    expect(isReactModalClassInBody()).toBeTruthy();
     unmountModal();
-    expect(findReactModalOpenClass() === -1).toBe(true);
+    expect(!isReactModalClassInBody()).toBeTruthy();
   });
 
   it('adds class to body when open', function() {
     renderModal({ isOpen: false });
-    expect(document.body.className.indexOf('ReactModal__Body--open') !== -1).toEqual(false);
+    expect(!isReactModalClassInBody()).toBeTruthy();
     unmountModal();
 
     renderModal({ isOpen: true });
-    expect(document.body.className.indexOf('ReactModal__Body--open') !== -1).toEqual(true);
+    expect(isReactModalClassInBody()).toBeTruthy();
     unmountModal();
 
     renderModal({ isOpen: false });
-    expect(document.body.className.indexOf('ReactModal__Body--open') !== -1).toEqual(false);
+    expect(!isReactModalClassInBody()).toBeTruthy();
   });
 
   it('removes class from body when unmounted without closing', function() {
-    renderModal({isOpen: true});
-    expect(document.body.className.indexOf('ReactModal__Body--open')  !== -1).toEqual(true);
+    renderModal({ isOpen: true });
+    expect(isReactModalClassInBody()).toBeTruthy();
     unmountModal();
-    expect(document.body.className.indexOf('ReactModal__Body--open')  !== -1).toEqual(false);
+    expect(!isReactModalClassInBody()).toBeTruthy();
   });
 
   it('removes aria-hidden from appElement when unmounted without closing', function() {
@@ -263,7 +274,7 @@ describe('Modal', () => {
   });
 
   it('adds --after-open for animations', function() {
-    renderModal({isOpen: true});
+    renderModal({ isOpen: true });
     var overlay = document.querySelector('.ReactModal__Overlay');
     var content = document.querySelector('.ReactModal__Content');
     expect(overlay.className.match(/ReactModal__Overlay--after-open/)).toExist();
@@ -295,13 +306,13 @@ describe('Modal', () => {
       afterEach('Unmount modal', emptyDOM);
 
       it('verify default prop of shouldCloseOnOverlayClick', () => {
-	const modal = renderModal({ isOpen: true });
-	expect(modal.props.shouldCloseOnOverlayClick).toEqual(true);
+        var modal = renderModal({ isOpen: true });
+        expect(modal.props.shouldCloseOnOverlayClick).toEqual(true);
       });
 
       it('verify prop of shouldCloseOnOverlayClick', function () {
-	var modal = renderModal({isOpen: true, shouldCloseOnOverlayClick: false});
-	expect(modal.props.shouldCloseOnOverlayClick).toEqual(false);
+        var modal = renderModal({isOpen: true, shouldCloseOnOverlayClick: false});
+        expect(modal.props.shouldCloseOnOverlayClick).toEqual(false);
       });
     });
 
@@ -309,104 +320,102 @@ describe('Modal', () => {
       afterEach('Unmount modal', emptyDOM);
 
       it('verify overlay click when shouldCloseOnOverlayClick sets to false', () => {
-	const requestCloseCallback = sinon.spy();
-	const modal = renderModal({
-	  isOpen: true,
-	  shouldCloseOnOverlayClick: false
-	});
-	expect(modal.props.isOpen).toEqual(true);
-	var overlay = TestUtils.scryRenderedDOMComponentsWithClass(modal.portal, 'ReactModal__Overlay');
-	expect(overlay.length).toEqual(1);
-	Simulate.click(overlay[0]); // click the overlay
-	expect(!requestCloseCallback.called).toBeTruthy();
+        var requestCloseCallback = sinon.spy();
+        var modal = renderModal({
+          isOpen: true,
+          shouldCloseOnOverlayClick: false
+        });
+        expect(modal.props.isOpen).toEqual(true);
+        var overlay = findDOMWithClass(modal.portal, 'ReactModal__Overlay');
+        expect(overlay.length).toEqual(1);
+        Simulate.click(overlay[0]); // click the overlay
+        expect(!requestCloseCallback.called).toBeTruthy();
       });
 
       it('verify overlay click when shouldCloseOnOverlayClick sets to true', function() {
-	var requestCloseCallback = sinon.spy();
-	var modal = renderModal({
-	  isOpen: true,
-	  shouldCloseOnOverlayClick: true,
-	  onRequestClose: function() {
-	    requestCloseCallback();
-	  }
-	});
-	expect(modal.props.isOpen).toEqual(true);
-	var overlay = TestUtils.scryRenderedDOMComponentsWithClass(modal.portal, 'ReactModal__Overlay');
-	expect(overlay.length).toEqual(1);
-	Simulate.click(overlay[0]); // click the overlay
-	expect(requestCloseCallback.called).toBeTruthy();
+        var requestCloseCallback = sinon.spy();
+        var modal = renderModal({
+          isOpen: true,
+          shouldCloseOnOverlayClick: true,
+          onRequestClose: function() {
+            requestCloseCallback();
+          }
+        });
+        expect(modal.props.isOpen).toEqual(true);
+        var overlay = findDOMWithClass(modal.portal, 'ReactModal__Overlay');
+        expect(overlay.length).toEqual(1);
+        Simulate.click(overlay[0]); // click the overlay
+        expect(requestCloseCallback.called).toBeTruthy();
       });
 
       it('verify overlay mouse down and content mouse up when shouldCloseOnOverlayClick sets to true', () => {
-	const requestCloseCallback = sinon.spy();
-	const modal = renderModal({
-	  isOpen: true,
-	  shouldCloseOnOverlayClick: true,
-	  onRequestClose: requestCloseCallback
-	});
-	expect(modal.props.isOpen).toEqual(true);
-	var overlay = TestUtils.scryRenderedDOMComponentsWithClass(modal.portal, 'ReactModal__Overlay');
-	var content = TestUtils.scryRenderedDOMComponentsWithClass(modal.portal, 'ReactModal__Content');
-	expect(overlay.length).toEqual(1);
-	expect(content.length).toEqual(1);
-	Simulate.mouseDown(overlay[0]); // click the overlay
-	Simulate.mouseUp(content[0]);
-	expect(!requestCloseCallback.called).toBeTruthy();
+        var requestCloseCallback = sinon.spy();
+        var modal = renderModal({
+          isOpen: true,
+          shouldCloseOnOverlayClick: true,
+          onRequestClose: requestCloseCallback
+        });
+        expect(modal.props.isOpen).toEqual(true);
+        var overlay = findDOMWithClass(modal.portal, 'ReactModal__Overlay');
+        var content = findDOMWithClass(modal.portal, 'ReactModal__Content');
+        expect(overlay.length).toEqual(1);
+        expect(content.length).toEqual(1);
+        Simulate.mouseDown(overlay[0]); // click the overlay
+        Simulate.mouseUp(content[0]);
+        expect(!requestCloseCallback.called).toBeTruthy();
       });
 
       it('verify content mouse down and overlay mouse up when shouldCloseOnOverlayClick sets to true', function() {
-	var requestCloseCallback = sinon.spy();
-	var modal = renderModal({
-	  isOpen: true,
-	  shouldCloseOnOverlayClick: true,
-	  onRequestClose: function() {
-	    requestCloseCallback();
-	  }
-	});
-	expect(modal.props.isOpen).toEqual(true);
-	var overlay = TestUtils.scryRenderedDOMComponentsWithClass(modal.portal, 'ReactModal__Overlay');
-	var content = TestUtils.scryRenderedDOMComponentsWithClass(modal.portal, 'ReactModal__Content');
-	expect(content.length).toEqual(1);
-	expect(overlay.length).toEqual(1);
-	Simulate.mouseDown(content[0]); // click the overlay
-	Simulate.mouseUp(overlay[0]);
-	expect(!requestCloseCallback.called).toBeTruthy();
+        var requestCloseCallback = sinon.spy();
+        var modal = renderModal({
+          isOpen: true,
+          shouldCloseOnOverlayClick: true,
+          onRequestClose: requestCloseCallback
+        });
+        expect(modal.props.isOpen).toEqual(true);
+        var overlay = findDOMWithClass(modal.portal, 'ReactModal__Overlay');
+        var content = findDOMWithClass(modal.portal, 'ReactModal__Content');
+        expect(content.length).toEqual(1);
+        expect(overlay.length).toEqual(1);
+        Simulate.mouseDown(content[0]); // click the overlay
+        Simulate.mouseUp(overlay[0]);
+        expect(!requestCloseCallback.called).toBeTruthy();
       });
 
       it('should not stop event propagation', function() {
-	var hasPropagated = false
-	var modal = renderModal({
-	  isOpen: true,
-	  shouldCloseOnOverlayClick: true
-	});
-	var overlay = TestUtils.scryRenderedDOMComponentsWithClass(modal.portal, 'ReactModal__Overlay');
-	window.addEventListener('click', function () { hasPropagated = true })
-	overlay[0].dispatchEvent(new MouseEvent('click', { bubbles: true }))
-	expect(hasPropagated).toBeTruthy();
+        var hasPropagated = false;
+        var modal = renderModal({
+          isOpen: true,
+          shouldCloseOnOverlayClick: true
+        });
+        var overlay = findDOMWithClass(modal.portal, 'ReactModal__Overlay');
+        window.addEventListener('click', function () { hasPropagated = true; });
+        overlay[0].dispatchEvent(new MouseEvent('click', { bubbles: true }));
+        expect(hasPropagated).toBeTruthy();
       });
     });
 
     it('verify event passing on overlay click', function() {
       var requestCloseCallback = sinon.spy();
       var modal = renderModal({
-	isOpen: true,
-	shouldCloseOnOverlayClick: true,
-	onRequestClose: requestCloseCallback
+        isOpen: true,
+        shouldCloseOnOverlayClick: true,
+        onRequestClose: requestCloseCallback
       });
       expect(modal.props.isOpen).toEqual(true);
-      var overlay = TestUtils.scryRenderedDOMComponentsWithClass(modal.portal, 'ReactModal__Overlay');
+      var overlay = findDOMWithClass(modal.portal, 'ReactModal__Overlay');
       expect(overlay.length).toEqual(1);
       // click the overlay
       Simulate.click(overlay[0], {
-	// Used to test that this was the event received
-	fakeData: 'ABC'
+        // Used to test that this was the event received
+        fakeData: 'ABC'
       });
       expect(requestCloseCallback.called).toBeTruthy();
       // Check if event is passed to onRequestClose callback.
       var event = requestCloseCallback.getCall(0).args[0];
       expect(event).toBeTruthy();
-      expect(event.constructor).toBeTruthy();
-      expect(event.constructor.name).toEqual('SyntheticEvent');
+      expect(event.varructor).toBeTruthy();
+      expect(event.varructor.name).toEqual('SyntheticEvent');
     });
   });
 
@@ -418,25 +427,25 @@ describe('Modal', () => {
       onRequestClose: requestCloseCallback
     });
     expect(modal.props.isOpen).toEqual(true);
-    Simulate.keyDown(modal.portal.refs.content, {key: "Esc", keyCode: 27, which: 27})
+    dispatchMockEscKey(modal.portal.refs.content);
     expect(requestCloseCallback.called).toBeTruthy();
     // Check if event is passed to onRequestClose callback.
     var event = requestCloseCallback.getCall(0).args[0];
     expect(event).toBeTruthy();
-    expect(event.constructor).toBeTruthy();
-    expect(event.constructor.name).toEqual('SyntheticEvent');
+    expect(event.varructor).toBeTruthy();
+    expect(event.varructor.name).toEqual('SyntheticEvent');
   });
 
   it('adds --before-close for animations', () => {
-    const closeTimeoutMS = 50;
-    const modal = renderModal({
+    var closeTimeoutMS = 50;
+    var modal = renderModal({
       isOpen: true,
       closeTimeoutMS
     });
     modal.portal.closeWithTimeout();
 
-    const overlay = TestUtils.findRenderedDOMComponentWithClass(modal.portal, 'ReactModal__Overlay');
-    const content = TestUtils.findRenderedDOMComponentWithClass(modal.portal, 'ReactModal__Content');
+    var overlay = TestUtils.findRenderedDOMComponentWithClass(modal.portal, 'ReactModal__Overlay');
+    var content = TestUtils.findRenderedDOMComponentWithClass(modal.portal, 'ReactModal__Content');
 
     expect(/ReactModal__Overlay--before-close/.test(overlay.className)).toBe(true);
     expect(/ReactModal__Content--before-close/.test(content.className)).toBe(true);
@@ -445,14 +454,14 @@ describe('Modal', () => {
   });
 
   it('keeps the modal in the DOM until closeTimeoutMS elapses', (done) => {
-    const closeTimeoutMS = 100;
+    var closeTimeoutMS = 100;
 
-    const modal = renderModal({ isOpen: true, closeTimeoutMS });
+    var modal = renderModal({ isOpen: true, closeTimeoutMS });
     modal.portal.closeWithTimeout();
 
     function checkDOM(count) {
-      const overlay = document.querySelectorAll('.ReactModal__Overlay');
-      const content = document.querySelectorAll('.ReactModal__Content');
+      var overlay = document.querySelectorAll('.ReactModal__Overlay');
+      var content = document.querySelectorAll('.ReactModal__Content');
       expect(overlay.length).toBe(count);
       expect(content.length).toBe(count);
     }
